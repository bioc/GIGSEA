{
    "collab_server" : "",
    "contents" : "---\ntitle: 'GIGSEA: Genotype Imputed Gene Set Enrichment Analysis'\nauthor: |\n  | Shijia Zhu\n  | Department of Genetics and Genomic Sciences and Icahn Institute for Genomics and Multiscale Biology, Icahn School of Medicine at Mount Sinai, New York, NY 10029, USA\ndate: \"August 28, 2017\"\noutput:\n  pdf_document:\n    toc: yes\n    toc_depth: '3'\n  html_document:\n    highlight: tango\n    theme: united\n    toc: yes\n    toc_depth: 3\n---\n<!--\n%\\VignetteEngine{knitr::rmarkdown}\n%\\VignetteIndexEntry{GIGSEA: Genotype Imputed Gene Set Enrichment Analysis}\n-->\n\n## Abstract\nWe presented the Genotype Imputed Gene Set Enrichment Analysis (GIGSEA), a novel\nmethod that uses GWAS-and-eQTL-imputed differential gene expression to \ninterrogate gene set enrichment for the trait-associated SNPs. By incorporating \neQTL from large gene expression studies, e.g. GTEx, GIGSEA appropriately \naddresses such challenges for SNP enrichment as gene size, gene boundary, \nandmultiple-marker regulation. The weighted linear regression model, taking as \nweights both imputation accuracy and model completeness, was used to test the \nenrichment, properly adjusting the bias due to redundancy in different gene \nsets. The permutation test, furthermore, is used to evaluate the significance \nof enrichment, whose efficiency can be largely elevated by expressing the \ncomputational intensive part in terms of large matrix operation. We have shown \nthe appropriate type I error rates for GIGSEA (<5%), and the preliminary results\nalso demonstrate its good performance to uncover the real biological signal. \n\n\n## 1. Import packages\nIn GIGSEA, the gene sets are saved as matrices. Such matrices are largely \nsparse, so, in order to save space, we used the functions provided by the R \npackage \"Matrix\" to build the sparse matrices and pre-saved into the GIGSEA \npackage. In addition, GIGSEA uses the local fdr, implemented by the R package \n\"locfdr\", to adjust for multiple hypothesis testing.  \n\n```{r}\nlibrary(GIGSEA)\n```\n\n## 2. Quick start\nGIGSEA first uses MetaXcan (also called \"s-predixcan\") to impute \ntrait-associated differential gene expression from both GWAS summary and eQTL \ndatabase with LD structure adjusted, and next, builds a weighted regression \nmodel to perfrom gene set enrichment analysis. In user's convenience, we combine\nthese procedures together into one function `runGIGSEA()`, which writes the \nenrichment test results at the local directory. Users only need to provide their\nGWAS summary data, and specify the paths to the MetaXcan.py file, the eQTL \ndatabase (e.g. GTex and DGN) and the reference popultation (e.g. 1000 Genome). \n\n```{r}\n#runGIGSEA( MetaXcan=\"software/MetaXcan.py\" , model_db_path=\"eQTL/DGN-WB_0.5.db\", covariance=\"reference/covariance.DGN-WB_0.5.txt.gz\", gwas_folder=\"data/GWAS_summary\", gwas_file_pattern=\"heart.sumstats\", output_dir=\"result/GIGSEA\", permutation_num=1000)\n```\n\nAlternatively, users can also submit their GWAS summary data to the online version of MetaXcan (s-predixcan) <https://cloud.hakyimlab.org/s-predixcan> to impute the trait-associated differential gene expression, and next, run the following steps provided by GIGSEA to perform the gene set enrichment analysis for the trait-associated SNPs. \n\n***In case that users had neither installed MetaXcan nor run the online MetaXcan, an example of MetaXcan-imputed differential gene expression is given as follows. Users can use it to test the codes of GIGSEA step by step.\n\n## 3. One example of MetaXcan output\nMetaXcan integrates GWAS summary result with eQTL information to map trait-associated genes. See <https://github.com/hakyimlab/MetaXcan>. It provides a novel way to aggregate the multiple markers within each gene, address the long-range regulation, and adjust bias from gene boundaries and gene size. We use MetaXcan to impute the complex-trait-associated differential gene expression from eQTL summary and GWAS summary datasets. MetaXcan imputes ~10,000 genes with high quality prediction in most tissues. The training dataset for the expression prediction or 1000 Genomes was used as reference population to address the LD structure (covariance) of markers. Users can also specify their own genotype data to address the LD structure. The eQTL summary data was pre-calculated from large gene expression studies, such as the Genotype-Tissue Expression Project (GTEx; a comprehensive set of tissues from of ~20,000 samples) (Lonsdale, et al., 2013) and Depression Genes and Networks (DGN; 922 whole-blood samples) (Battle, et al., 2014). So, users only need to provide the GWAS summary data to estimate the genetically regulated gene expression. \n\nWe take as an example the cardiovascular disease (CVD) GWAS, CARDIoGRAMplusC4D (60,801 cases, 123,504 controls and 9.4M SNPs) (Nikpay, et al., 2015). The summary data is downloaded from <http://www.cardiogramplusc4d.org/data-downloads/>. We run the MetaXcan on it based on DGN eQTL database and 1000 Genomes as covariance. \n\n```{r}\ndata(heart.metaXcan)\nhead(heart.metaXcan)\n```\n\nEach row is a gene's association result:\n\n- `gene`: a gene's id\n- `gene_name`: a gene's name\n- `zscore`: MetaXcan's association result for the gene\n- `effect_size`: MetaXcan's association effect size for the gene\n- `pvalue`: P-value of the aforementioned statistic\n- `pred_perf_r2`: R2 of transcriptome prediction model's correlation to gene's measured transcriptome\n- `pred_perf_pval`: pval of transcriptome prediction model's correlation to gene's measured transcriptome\n- `pred_perf_qval`: qval of transcriptome prediction model's correlation to gene's measured transcriptome\n- `n_snps_used`: number of snps from GWAS that got used in MetaXcan analysis\n- `n_snps_in_cov`: number of snps in the covariance matrix\n- `n_snps_in_model`: number of snps in the prediction model\n- `var_g`: variance of the gene expression\n\n\nWe use the linear regression model to build a threshold-free gene set enrichment test, checking whether genes are significantly differentially expressed in a given gene set, as compared to the background. In the regression model, we regress the imputed Z-score of differential gene expression on the gene sets. However, the gene expression cannot be perfectly predicted using genotype, which is indicated by the prediction R^2, and moreover, not all SNPs in the prediction model are in userâ€™s dataset. In order to take into account such two factors, we use as weights the multiplication of prediction R^2 and fraction of imputation-used SNPs, building a weighted linear regression model. \n\n```{r}\ngene = heart.metaXcan$gene_name\n# extract the imputed Z-score of differential gene expression, which follows \n# the normal distribution\nfc <- heart.metaXcan$zscore\n# use the prediction R^2 and fraction of imputation-used SNPs as weights \nusedFrac <- heart.metaXcan$n_snps_used / heart.metaXcan$n_snps_in_model\nr2 <- heart.metaXcan$pred_perf_r2\nweights <- usedFrac*r2\n# build a new data frame for the following weighted linear regression-based \n# enrichment analysis\ndata <- data.frame(gene,fc,weights)\nhead(data)\n```\n\n\n## 4. Load data of gene sets\nGIGSEA is built on the weighted linear regression model, so it permits both discrete-valued and continuous-valued gene sets. We already incorporated several gene sets into the GIGSEA package, including:\n\n1) **discrete-valued gene sets**:\n- `MSigDB.KEGG.Pathway`: Gene sets derived from the KEGG pathway database. It comprises 186 pathways (column) and 5267 genes (row). See c2.cp.kegg.v6.0.symbols.gmt.txt at <http://software.broadinstitute.org/gsea/msigdb/collections.jsp#C2> \n- `MSigDB.TF`: Gene sets that share upstream cis-regulatory motifs which can function as potential transcription factor binding sites. It comprises 615 TFs (column) and 12774 genes (row). See c3.tft.v6.0.symbols.gmt.txt at <http://software.broadinstitute.org/gsea/msigdb/collections.jsp#C3> \n- `MSigDB.miRNA`: Gene sets that contain genes sharing putative target sites (seed matches) of human mature miRNA in their 3'-UTRs. It comprises 221 miRNAs (column) and 7444 genes (row). See c3.mir.v6.0.symbols.gmt.txt at <http://software.broadinstitute.org/gsea/msigdb/collections.jsp#C3>\n- `GO`: Gene sets that contain genes annotated by the same Gene Ontology (GO) term. For each GO term, we not only incorporate its own gene sets, but also incorporate the gene sets belonging to its offsprings. See the \"database GO.db\" in R. \n\n2) **continuous-valued gene sets**:\n- `Fantom5.TF`: The human transcript promoter locations were obtained from Fantom5. Based on the promoter locations, the tool MotEvo was used to predict the human transcriptional factor (TF) target sites. The dataset contains 500 Positional Weight Matrices (PWM) and 21964 genes. For each PWM, there is a list of associated human TFs, ordered by percent identity of TFs known to bind sites of the PWM. The list of associations was checked manually. The entire set of PWMs and mapping to associated TFs is available from the SwissRegulon website  <http://www.swissregulon.unibas.ch>.\n- `TargetScan.miRNA`: Gene sets of predicted human miRNA target sites were downloaded from TargetScan. TargetScan groups miRNAs that have identical subsequences at positions 2 through 8 of the miRNA, i.e. the 2-7 seed region plus the 8th nucleotide, and provides predictions for each such seed motif. TargetScan covers 87 human miRNA seed motifs in total. It provides a score for each seed motif and each RefSeq transcript, called preferential conservation scoring (aggregate Pct), which shows consistently high performance in various benchmark tests. To obtain a site count associated with each gene, we average the TargetScan Pct scores of all RefSeq transcripts associated with each gene. It comprises 87 miRNA seed motifs and 9861 genes. See <http://www.targetscan.org>.\n- `LINCS.CMap.drug`: Large perturbational datasets of gene expression signature from small-molecule compounds in multiple cell types from LINCS/CMap database. We downloaded the data of LINCS phase 2 level 5 from GEO (GSE70138). The data is saved in the GCTx format (binary format based on HDF5 that enables fast i/o than text), and we parsed it using the R package cmapR. The LINCS level 5 data is a numeric matrix, comprising 118050 drugs/doses and 12328 genes. Each entry is a replicate-collapsed z-score of differential gene expression due to a drug perturbation, which is calculated by aggregating across individual replicates. See <https://clue.io>. In order to generate a single signature for each drug perturbation, we further average the differential gene expression across different drug doses, resulting in a condensed matrix of 1826 drugs (column) and 12328 genes (row). \n\n### 4.1 Discrete-valued gene sets:\nWe first show an example of discrete-valued gene set: MSigDB.KEGG.Pathway, where the row represents the gene, and the column represents the pathway. Each entry takes discrete values of 0 or 1, where 1 represents the gene (row) belongs to the pathway (column), and otherwise, not.  \n```{r}\n# load data\ndata(MSigDB.KEGG.Pathway)\n# MSigDB.KEGG.Pathway is a list comprising two components: net and annot\nclass(MSigDB.KEGG.Pathway)\nnames(MSigDB.KEGG.Pathway)\ndim(MSigDB.KEGG.Pathway$net)\n# the column is the pathway and the row is the gene\nhead(colnames(MSigDB.KEGG.Pathway$net))\nhead(rownames(MSigDB.KEGG.Pathway$net))\n# the annotation of the pathway\nhead(MSigDB.KEGG.Pathway$annot)\n# the net takes discrete values of 0 or 1\nhead(MSigDB.KEGG.Pathway$net[,1:30])\n```\n\n\n### 4.2 Continuous-valued gene sets:\nFollowed is an example of continuous-valued gene set: TargetScan.miRNA, where the row represents the gene, and the column represents the miRNA. Each entry takes continuous values of pct, representing the binding affinity of miRNA on the gene 3' UTR.   \n```{r}\n# load data\ndata(TargetScan.miRNA)\n# TargetScan.miRNA is a list comprising two components: net and annot\nclass(TargetScan.miRNA)\nnames(TargetScan.miRNA)\ndim(TargetScan.miRNA$net)\n# the column is the miRNA and the row is the gene\nhead(colnames(TargetScan.miRNA$net))\nhead(rownames(TargetScan.miRNA$net))\n# the annotation of the miRNA\nhead(TargetScan.miRNA$annot)\n# the net takes continuous values\nhead(TargetScan.miRNA$net[,1:20])\n```\n\n### 4.3 User self-defined gene set\nIn adition to the above predefined gene sets, users can also specify their own gene set. Here, we take as an example the CREEDS <http://amp.pharm.mssm.edu/CREEDS/>. It is a manually curated database of gene signatures of single drug perturbations. For each drug perturbation, it lists both up-regulated and down-regulated gene sets. In the following example, we transform the gmt format file into a sparse matrix, where for each drug perturbation, the up-regulated genes take the value of 1, the down-regulated genes take the value of -1, and the others take the value of 0. \n```{r}\n# downlaod the gmt file\ngmt <- readLines('http://amp.pharm.mssm.edu/CREEDS/download/single_drug_perturbations-v1.0.gmt')\n# obtain the index of up-regulated and down-regulated gene sets\nindex_up <- grep('-up',gmt)\nindex_down <- grep('-dn',gmt)\n# transform the gmt file into gene sets. The gene set is a data frame, comprising three vectors: term (here is drug), geneset (a gene symbol list separated by comma), and value (1 and -1 separated by comma) \ngff_up <- gmt2geneSet( gmt[index_up] , termCol=c(1,2) , singleValue = 1 )\ngff_down <- gmt2geneSet( gmt[index_down] , termCol=c(1,2) , singleValue = -1 )\n\n# as following, combine the up-regulated and down-regulated gene sets together, and use value of 1 and -1 to indicate their direction:\n# extract the drug names\nterm_up <- sapply( gff_up$term , function(x) gsub('-up','',x) )\nterm_down <- sapply( gff_down$term , function(x) gsub('-dn','',x) )\nall(term_up==term_down)\n# combine the up-regulated and down-regulated gene names for each drug perturbation\ngeneset <- sapply( 1:nrow(gff_up) , function(i) paste(gff_up$geneset[i],gff_down$geneset[i],sep=',') )\n# use 1 and -1 to indicate the direction of the up-regulated and down-regulated genes, respectively \nvalue <- sapply( 1:nrow(gff_up) , function(i) paste(gff_up$value[i],gff_down$value[i],sep=',') )\n# transform the gene set into matrix, where the row represents the gene, the column represents the drug perturbation, and each entry takes values of 1 and -1\nnet1 <- geneSet2Net( term=term_up , geneset=geneset , value=value )\n# transform the gene set into sparse matrix, where the row represents the gene, the column represents the drug perturbation, and each entry takes values of 1 and -1\nnet2 <- geneSet2sparseMatrix( term=term_up , geneset=geneset , value=value )\ntail(net1[,1:30])\ntail(net2[,1:30])\n# the size of sparse matrix is much smaller than the matrix\nformat( object.size(net1), units = \"auto\")\nformat( object.size(net2), units = \"auto\")\n```\n\n\n## 5. Gene set enrichment analysis\n### 5.1 Gene set enrichment analysis using weighted simple linear regression model\nAfter obtaining the imputed differential gene expression and the weights, we build the weighted linear regression model to investigate the gene set enrichment. Permutation test was used to adjust the p values of the regression coefficients. We repeatedly shuffle the differential gene expression to obtain a global null distribution of no associated gene sets and calculate the empirical p value for each gene set. For the Single Gene Set Erichment Analysis (SGSEA), especially with many gene sets tested, a large number of weighted simple linear regression model would be interrogated. To improve the efficiency, we use weighted Pearson correlation to rank the significance, which uses the same hypothesis statistic with the weighted linear regression model. Furthermore, we expressed it in terms of large matrix inner product, substantially improving the time efficiency. \n\n```{r}\n# take MSigDB.KEGG.Pathway as an example\nnet <- MSigDB.KEGG.Pathway$net\n# intersect the permuted genes with the gene sets of interest\ndata2 <- orderedIntersect( x = data , by.x = data$gene , by.y = rownames(net)  )\nnet2 <- orderedIntersect( x = net , by.x = rownames(net) , by.y = data$gene  )\nall( rownames(net2) == as.character(data2$gene) )\n# the SGSEA.res1 uses the weighted simple linear regression model, while SGSEA.res2 used the weighted Pearson correlation. The latter one takes substantially less time. \nsystem.time( SGSEA.res1 <- permutationSimpleLm( fc=data2$fc , net=net2 , weights=data2$weights , num=100 ) )\nsystem.time( SGSEA.res2 <- permutationSimpleLmMatrix( fc=data2$fc , net=net2 , weights=data2$weights , num=100 ) )\nhead(SGSEA.res2)\n```\n\n### 5.2 Gene set enrichment analysis using weighted multiple regression model\nA gene may function in multiple ways and thus appear multiple times in functional gene sets. In spite of reflecting the crosstalk between gene sets, such overlap may make the results of gene set analysis more difficult to interpret.\nTo address the redundancy existing among gene sets, we build a weighted multiple linear regression model, taking into account all gene sets in one model. The redundancy of one gene set can be adjusted by considering all other gene sets as covariates. To improve the time efficiency, we also use matrix operation to solve the weighted multiple regression model.   \n\n```{r}\n# MGSEA.res1 uses the weighted multiple linear regression model \nsystem.time( MGSEA.res1 <- permutationMultipleLm( fc=data2$fc , net=net2 , weights=data2$weights , num=1000 ) )\n# MGSEA.res2 used the matrix solution\nsystem.time( MGSEA.res2 <- permutationMultipleLmMatrix( fc=data2$fc , net=net2 , weights=data2$weights , num=1000 ) )\nhead(MGSEA.res2)\n```\n\n### 5.3 One-step weightedGSEA\nIn user's convenience, we combine the above procedures together into one function `weightedGSEA()`. Based on the imputed differential gene expression, `weightedGSEA()` checks multiple classes of gene sets simultaneously and writes out the enrichment analysis results. Users need to provide the same data with above, and specify the columns of gene names (geneCol), imputed differential gene expression (fcCol), and weights (weightCol). Additionally, users specify the gene sets of interest (geneSet), the times of permutation (permutationNum) and the directory for saving the results (outputDir). By default, we only do SGSEA. Users can specify `MGSEAthres` to perform MGMEA for those with less than `MGSEAthres` gene sets. \n\n```{r}\n# import packages and prepare data as above\nlibrary(GIGSEA)\n\n# prepare the dataset\ndata(heart.metaXcan)\ngene = heart.metaXcan$gene_name\nfc <- heart.metaXcan$zscore\nusedFrac <- heart.metaXcan$n_snps_used / heart.metaXcan$n_snps_in_cov\nr2 <- heart.metaXcan$pred_perf_r2\nweights <- usedFrac*r2\ndata <- data.frame(gene,fc,weights)\n\n# run one-step GIGSEA \n#weightedGSEA(data, geneCol='gene', fcCol='fc', weightCol= 'weights', geneSet=c(\"MSigDB.KEGG.Pathway\",\"Fantom5.TF\",\"TargetScan.miRNA\",\"GO\"), permutationNum=10000, outputDir=\"./GIGSEA\" )\n\n#dir(\"./GIGSEA\")\n```\n",
    "created" : 1527565162904.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1163429032",
    "id" : "EC6D1E8F",
    "lastKnownWriteTime" : 1527565200,
    "last_content_update" : 1527565200908,
    "path" : "~/Documents/MyPackages/Git/GIGSEA/vignettes/GIGSEA_tutorial.Rmd",
    "project_path" : "vignettes/GIGSEA_tutorial.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}